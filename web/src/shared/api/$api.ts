import axios, { AxiosError, type InternalAxiosRequestConfig } from "axios";

export const API_URL = import.meta.env.VITE_API_URL || "http://localhost:3000";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export const api = axios.create({
  baseURL: API_URL,
  withCredentials: true, // üëà –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ cookies
  headers: {
    "Content-Type": "application/json",
  },
});

// –¢–∏–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
export interface FilterProjectsDto {
  page?: number;
  limit?: number;
  search?: string;
  isVerified?: boolean;
  isBlocked?: boolean;
}

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
export const projectsApi = {
  getProjects: (filters?: FilterProjectsDto) =>
    api.get("/projects", { params: filters }).then((res) => res.data),

  getProjectsByUser: (userId: string, filters?: FilterProjectsDto) =>
    api
      .get(`/projects/user/${userId}`, { params: filters })
      .then((res) => res.data),

  createProject: (data: { name: string; description?: string }) =>
    api.post("/projects", data).then((res) => res.data),

  deleteProject: (id: string) =>
    api.delete(`/projects/${id}`).then((res) => res.data),
};

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ refresh
let isRefreshing = false;
let refreshSubscribers: ((token: string) => void)[] = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
const subscribeTokenRefresh = (cb: (token: string) => void) => {
  refreshSubscribers.push(cb);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
const onTokenRefreshed = () => {
  refreshSubscribers.forEach((cb) => cb("refreshed"));
  refreshSubscribers = [];
};

// Response Interceptor - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
api.interceptors.response.use(
  // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  (response) => response,

  // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
  async (error: AxiosError) => {
    const originalRequest = error.config as InternalAxiosRequestConfig & {
      _retry?: boolean;
    };

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 –∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (error.response?.status === 401 && !originalRequest._retry) {
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ refresh –∏–ª–∏ login - –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      if (
        originalRequest.url?.includes("/auth/refresh") ||
        originalRequest.url?.includes("/auth/login")
      ) {
        return Promise.reject(error);
      }

      // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      if (isRefreshing) {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∂–¥–µ–º
        return new Promise((resolve) => {
          subscribeTokenRefresh(() => {
            resolve(api(originalRequest));
          });
        });
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        await api.post("/auth/refresh");

        // –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        isRefreshing = false;
        onTokenRefreshed();

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return api(originalRequest);
      } catch (refreshError) {
        // Refresh –Ω–µ —É–¥–∞–ª—Å—è - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        isRefreshing = false;
        refreshSubscribers = [];

        // –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª–æ–Ω—è–µ–º –æ—à–∏–±–∫—É - —Ä–æ—É—Ç–∏–Ω–≥ —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —á–µ—Ä–µ–∑ _protected/_publick
        // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º window.location.href - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);
