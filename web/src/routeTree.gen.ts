/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublickRouteImport } from './routes/_publick'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublickRegisterRouteImport } from './routes/_publick/register'
import { Route as PublickLoginRouteImport } from './routes/_publick/login'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { Route as ProtectedAccountRouteImport } from './routes/_protected/account'
import { Route as ProtectedProjectsIndexRouteImport } from './routes/_protected/projects/index'
import { Route as ProtectedProjectsIdProjectRouteImport } from './routes/_protected/projects/$idProject'
import { Route as ProtectedProjectsIdProjectEditRouteImport } from './routes/_protected/projects/$idProject.edit'

const PublickRoute = PublickRouteImport.update({
  id: '/_publick',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublickRegisterRoute = PublickRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublickRoute,
} as any)
const PublickLoginRoute = PublickLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublickRoute,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAccountRoute = ProtectedAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProjectsIndexRoute = ProtectedProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProjectsIdProjectRoute =
  ProtectedProjectsIdProjectRouteImport.update({
    id: '/projects/$idProject',
    path: '/projects/$idProject',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedProjectsIdProjectEditRoute =
  ProtectedProjectsIdProjectEditRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => ProtectedProjectsIdProjectRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof ProtectedAccountRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/login': typeof PublickLoginRoute
  '/register': typeof PublickRegisterRoute
  '/projects/$idProject': typeof ProtectedProjectsIdProjectRouteWithChildren
  '/projects': typeof ProtectedProjectsIndexRoute
  '/projects/$idProject/edit': typeof ProtectedProjectsIdProjectEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof ProtectedAccountRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/login': typeof PublickLoginRoute
  '/register': typeof PublickRegisterRoute
  '/projects/$idProject': typeof ProtectedProjectsIdProjectRouteWithChildren
  '/projects': typeof ProtectedProjectsIndexRoute
  '/projects/$idProject/edit': typeof ProtectedProjectsIdProjectEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_publick': typeof PublickRouteWithChildren
  '/_protected/account': typeof ProtectedAccountRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_publick/login': typeof PublickLoginRoute
  '/_publick/register': typeof PublickRegisterRoute
  '/_protected/projects/$idProject': typeof ProtectedProjectsIdProjectRouteWithChildren
  '/_protected/projects/': typeof ProtectedProjectsIndexRoute
  '/_protected/projects/$idProject/edit': typeof ProtectedProjectsIdProjectEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/projects/$idProject'
    | '/projects'
    | '/projects/$idProject/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/projects/$idProject'
    | '/projects'
    | '/projects/$idProject/edit'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_publick'
    | '/_protected/account'
    | '/_protected/dashboard'
    | '/_publick/login'
    | '/_publick/register'
    | '/_protected/projects/$idProject'
    | '/_protected/projects/'
    | '/_protected/projects/$idProject/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublickRoute: typeof PublickRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_publick': {
      id: '/_publick'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublickRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_publick/register': {
      id: '/_publick/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublickRegisterRouteImport
      parentRoute: typeof PublickRoute
    }
    '/_publick/login': {
      id: '/_publick/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublickLoginRouteImport
      parentRoute: typeof PublickRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/account': {
      id: '/_protected/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof ProtectedAccountRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/projects/': {
      id: '/_protected/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProtectedProjectsIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/projects/$idProject': {
      id: '/_protected/projects/$idProject'
      path: '/projects/$idProject'
      fullPath: '/projects/$idProject'
      preLoaderRoute: typeof ProtectedProjectsIdProjectRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/projects/$idProject/edit': {
      id: '/_protected/projects/$idProject/edit'
      path: '/edit'
      fullPath: '/projects/$idProject/edit'
      preLoaderRoute: typeof ProtectedProjectsIdProjectEditRouteImport
      parentRoute: typeof ProtectedProjectsIdProjectRoute
    }
  }
}

interface ProtectedProjectsIdProjectRouteChildren {
  ProtectedProjectsIdProjectEditRoute: typeof ProtectedProjectsIdProjectEditRoute
}

const ProtectedProjectsIdProjectRouteChildren: ProtectedProjectsIdProjectRouteChildren =
  {
    ProtectedProjectsIdProjectEditRoute: ProtectedProjectsIdProjectEditRoute,
  }

const ProtectedProjectsIdProjectRouteWithChildren =
  ProtectedProjectsIdProjectRoute._addFileChildren(
    ProtectedProjectsIdProjectRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtectedAccountRoute: typeof ProtectedAccountRoute
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedProjectsIdProjectRoute: typeof ProtectedProjectsIdProjectRouteWithChildren
  ProtectedProjectsIndexRoute: typeof ProtectedProjectsIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAccountRoute: ProtectedAccountRoute,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedProjectsIdProjectRoute: ProtectedProjectsIdProjectRouteWithChildren,
  ProtectedProjectsIndexRoute: ProtectedProjectsIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublickRouteChildren {
  PublickLoginRoute: typeof PublickLoginRoute
  PublickRegisterRoute: typeof PublickRegisterRoute
}

const PublickRouteChildren: PublickRouteChildren = {
  PublickLoginRoute: PublickLoginRoute,
  PublickRegisterRoute: PublickRegisterRoute,
}

const PublickRouteWithChildren =
  PublickRoute._addFileChildren(PublickRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  PublickRoute: PublickRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
