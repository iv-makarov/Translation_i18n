import { MikroORM } from '@mikro-orm/sqlite';
import { ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import cookieParser from 'cookie-parser';
import * as fs from 'fs';
import * as path from 'path';
import { AppModule } from './modules/app/app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Cookie Parser - –í–ê–ñ–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
  app.use(cookieParser());

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  // CORS —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  app.enableCors({
    origin: process.env.FRONTEND_URL || 'http://localhost:5173',
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  });

  // Initialize database schema
  const orm = app.get(MikroORM);
  await orm.getSchemaGenerator().updateSchema();

  // Swagger —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const config = new DocumentBuilder()
    .setTitle('Translation API')
    .setDescription('The translation API description')
    .setVersion('1.0')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: 'Enter JWT token',
        in: 'header',
      },
      'JWT-auth',
    )
    .build();

  const document = SwaggerModule.createDocument(app, config);

  // Setup Swagger UI
  SwaggerModule.setup('api', app, document, {
    jsonDocumentUrl: '/api.json',
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è swagger.json –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ–≥–¥–∞ –≤ dev —Ä–µ–∂–∏–º–µ (–∫–æ–≥–¥–∞ –Ω–µ production)
  if (process.env.NODE_ENV !== 'production') {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º process.cwd() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      // –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ (–∏–∑ dev –≤ root)
      const outputPath = path.join(
        process.cwd(),
        '../web/src/shared/api/generatedApi.json',
      );

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const dir = path.dirname(outputPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º swagger —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
      fs.writeFileSync(outputPath, JSON.stringify(document, null, 2));

      console.log(`‚úÖ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${outputPath}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    }
  }

  // Start server
  const port = process.env.PORT ?? 3000;
  await app.listen(port);
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
  console.log(`üìö Swagger UI: http://localhost:${port}/api`);
  console.log(`üìÑ OpenAPI JSON: http://localhost:${port}/api.json`);
}

void bootstrap();
